#!/usr/bin/env python
import os
import shutil
import sys
import tempfile
import subprocess

from optparse import OptionParser

import stage1
import stage2

from common import *
import yumconf


def check_running_as_root():
    if os.getuid() != 0:
        errormsg("Error: You need to be root to run this script")
        return False
    return True

def check_yum_priorities():
    ret = subprocess.call(['rpm', '--whatprovides', '-q', 'yum-priorities'])
    if ret != 0:
        errormsg("Error: nothing is providing yum-priorities")
        return False
    return True

def make_tarball(osgver, basearch, dver, metapackage, patch_dirs, prog_dir, stage_dir, relnum="0", prerelease=False):
    """Run all the steps to make a non-root tarball.
    Returns (success (bool), tarball_path (relative), tarball_size (in bytes))

    """
    yum = yumconf.YumConfig(osgver, dver, basearch, prerelease=prerelease)
    try:
        version = yum.query_osg_version() # (false 'unused variable' warning) pylint:disable=W0612
        tarball_path = "%(metapackage)s-%(version)s-%(relnum)s.%(dver)s.%(basearch)s.tar.gz" % locals()

        post_scripts_dir = os.path.join(prog_dir, "post-install")

        statusmsg("Making stage 2 tarball for %s" % (metapackage))
        if not stage2.make_stage2_tarball(
                stage_dir        = stage_dir,
                packages         = ['osg-ca-scripts', metapackage],
                tarball          = tarball_path,
                patch_dirs       = patch_dirs,
                post_scripts_dir = post_scripts_dir,
                osgver           = osgver,
                dver             = dver,
                basearch         = basearch,
                relnum           = relnum,
                prerelease       = prerelease):
            errormsg("Making stage 2 tarball for %s unsuccessful. Files have been left in %r" % (metapackage, stage_dir))
            return (False, None, 0)
        tarball_size = os.stat(tarball_path)[6]
        return (True, tarball_path, tarball_size)
    finally:
        del yum


def print_usage(prog_name):
    print("Usage: %s <release-number> %s %s" % (prog_name,
                                  "|".join(VALID_DVERS),
                                  "|".join(VALID_BASEARCHES)))
    print "   or: %s <release-number> all" % prog_name


def parse_cmdline_args(argv):
    parser = OptionParser("""
    %prog [options] --osgver=<osgver> --dver=<dver> --basearch=<basearch>
or: %prog [options] --osgver=<osgver> --all
""")
    parser.add_option("-o", "--osgver", help="OSG Major Version (e.g 3.1). Required.")
    parser.add_option("-r", "--relnum", default="1", help="Release number. Default is %default.")
    parser.add_option("--prerelease", default=True, action="store_true", help="Take packages from the prerelease repository (the default)")
    parser.add_option("--no-prerelease", "--noprerelease", dest="prerelease", action="store_false", help="Do not take packages from the prerelease repository")
    parser.add_option("-d", "--dver", help="Build tarball for this distro version. Must be one of (" + ", ".join(VALID_DVERS) + ")")
    parser.add_option("-b", "--basearch", help="Build tarball for this base architecture. Must be one of (" + ", ".join(VALID_BASEARCHES) + ")")
    parser.add_option("-a", "--all", default=False, action="store_true", help="Build tarballs for all dver,basearch combinations.")

    options, args = parser.parse_args(argv[1:])

    if options.dver and options.dver not in VALID_DVERS:
        parser.error("--dver must be in " + ", ".join(VALID_DVERS))
    if options.basearch and options.basearch not in VALID_BASEARCHES:
        parser.error("--basearch must be in " + ", ".join(VALID_BASEARCHES))
    if not options.all and not (options.dver and options.basearch):
        parser.error("Either --all or --dver and --basearch must be specified.")
    if not options.osgver:
        parser.error("--osgver must be specified")

    return (options, args)


def main(argv):
    prog_name = os.path.basename(argv[0])
    prog_dir = os.path.dirname(argv[0])

    options, args = parse_cmdline_args(argv)

    statusmsg("Checking privileges")
    if not check_running_as_root():
        return 1
    statusmsg("Checking yum-priorities")
    if not check_yum_priorities():
        return 1

    if options.all:
        dvers        = VALID_DVERS
        basearches   = VALID_BASEARCHES
    else:
        dvers        = [options.dver]
        basearches   = [options.basearch]

    failed_paramsets = []
    written_tarballs = []
    for dver in dvers:
        for basearch in basearches:

            def _make_tarball_with_paramset(metapackage, patch_dirs, stage_dir):
                (success, tarball_path, tarball_size) = \
                    make_tarball(
                        osgver=options.osgver,
                        basearch=basearch,
                        dver=dver,
                        metapackage=metapackage,
                        patch_dirs=patch_dirs,
                        prog_dir=prog_dir,
                        stage_dir=stage_dir,
                        relnum=options.relnum,
                        prerelease=options.prerelease)

                if success:
                    written_tarballs.append([tarball_path, tarball_size])
                    print "Tarball created as %r, size %d bytes" % (tarball_path, tarball_size)
                    return True
                else:
                    failed_paramsets.append([dver, basearch])
                    return False
            #end _make_tarball_with_paramset

            stage_dir_parent = tempfile.mkdtemp(prefix='stagedir-%s-%s-' % (dver, basearch))
            wn_stage_dir = os.path.join(stage_dir_parent, 'osg-wn-client')
            full_stage_dir = os.path.join(stage_dir_parent, 'osg-client')

            statusmsg("Making stage 1 dir")
            if not stage1.make_stage1_dir(wn_stage_dir, options.osgver, dver, basearch):
                errormsg("Making stage 1 dir unsuccessful. Files have been left in %r" % wn_stage_dir)
                failed_paramsets.append([dver, basearch])
                continue

            if not _make_tarball_with_paramset('osg-wn-client', os.path.join(prog_dir, "patches/wn-client"), wn_stage_dir):
                continue

            shutil.move(wn_stage_dir, full_stage_dir)
            if not _make_tarball_with_paramset('osg-client', os.path.join(prog_dir, "patches/full-client"), full_stage_dir):
                continue

            statusmsg("Removing temp dirs")
            shutil.rmtree(stage_dir_parent, ignore_errors=True)
        #end for basearch in basearches
    #end for dver in dvers

    if written_tarballs:
        statusmsg("The following tarballs were written:")
        for tarball in written_tarballs:
            print "    path: %-50s size: %9d bytes" % (tarball[0], tarball[1])
    if failed_paramsets:
        errormsg("The following sets of parameters failed:")
        for paramset in failed_paramsets:
            print "    dver: %3s buildarch: %-6s" % (paramset[0], paramset[1])
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))

