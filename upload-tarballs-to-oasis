#!/bin/bash

TARBALL_CLIENT_DIR=/p/vdt/public/html/tarball-client
REMOTE_HOST=oasis-login.opensciencegrid.org
REMOTE_PATH_BASE=/net/nas01/Public/ouser.mis
#FINAL_LOCATION_BASE=/cvmfs/oasis.opensciencegrid.org/osg-software
FINAL_LOCATION_BASE=/cvmfs/oasis.opensciencegrid.org/mis

main() {
    [[ -n $1 ]] || die_with_usage # No version specified

    local version=$1
    local major_version=${version%.*}
    local release
    if [[ -z $2 ]]; then
        message "Release not specified; assuming release is '1'"
        release=1
    else
        release=$2
    fi
    local version_release=$version-$release
    # The dir each tarball will be extracted into in the staging area
    local remote_dir=$REMOTE_PATH_BASE/osg-wn-client/$major_version/$version
    # The path in the filesystem files will be accessible from on client machines
    local final_dir=$FINAL_LOCATION_BASE/osg-wn-client/$major_version/$version
    local current_symlink=$REMOTE_PATH_BASE/osg-wn-client/$major_version/current

    die_if_grid_commands_not_in_path

    foreach_dver_arch \
        die_if_tarball_missing $version_release \$dver \$arch

    get_proxy_if_needed_or_die

    die_if_remote_dir_exists $remote_dir # Don't want to clobber anything
    do_remotely mkdir -p $remote_dir

    foreach_dver_arch \
        transfer_and_extract_tarball_or_die $version_release \$dver \$arch $remote_dir

    foreach_dver_arch \
        run_post_unpack_steps \$dver \$arch $remote_dir $final_dir

    echo
    message "All steps successful. Login to $REMOTE_HOST and"
    message "verify the contents of $remote_dir are as expected."
    message "If this was the newest tarball for the $major_version"
    message "major version, then update the 'current' symlink by running:"
    message "ln -snf '$version' '$current_symlink'"
    message "Then, run 'osg-oasis-update'."
}

message() {
    echo $'\t'"$@"
}

die_with_usage() {
    message "Usage: $0 <VERSION> [<RELEASE>]"
    exit 2
}

get_proxy_if_needed_or_die() {
    message "Checking grid proxy..."
    grid-proxy-info -exists 2> /dev/null || grid-proxy-init || { message 'Could not get a proxy'; exit 1; }
}

local_tarball_path() {
    local version_release=$1
    local dver=$2
    local arch=$3
    echo $TARBALL_CLIENT_DIR/osg-wn-client-$version_release.$dver.$arch.tar.gz
}

do_remotely () {
    gsissh $REMOTE_HOST "$@"
}

transfer_and_extract_tarball_or_die() {
    local version_release=$1
    local dver=$2
    local arch=$3
    local remote_dir=$4
    local remote_subdir=$remote_dir/$dver-$arch
    local tarball=$(local_tarball_path "$version_release" "$dver" "$arch")
    local ret
    message "Transferring $(basename $tarball)"
    < "$tarball" do_remotely tar -xz -C "$remote_dir"
    ret=$?
    if [[ $ret -ne 0 ]]; then
        message "Error uploading $tarball"
        exit 1
    fi

    # Everything in the tarball is in the 'osg-wn-client' directory
    # That's redundant here, so have the dver and arch in the directory
    # name instead.
    do_remotely mv "$remote_dir/osg-wn-client" "$remote_subdir"
}

run_post_unpack_steps() {
    local dver=$1
    local arch=$2
    local remote_dir=$3
    local remote_subdir=$remote_dir/$dver-$arch
    local final_dir=$4
    local final_subdir=$final_dir/$dver-$arch
    message "Running post-unpack steps in $remote_subdir"
    do_remotely "(cd '$remote_subdir'; ./osg/osg-post-install . --final-osg-location='$final_subdir')"
    local ret=$?
    if [[ $ret -ne 0 ]]; then
        message "Unable to run osg-post-install for $dver $arch"
        exit 1
    fi
    do_remotely ln -s '/etc/grid-security/certificates' "$remote_subdir"/etc/grid-security/certificates
}


die_if_grid_commands_not_in_path() {
    message 'Checking path for required grid commands...'
    (
        set -o errexit
        which grid-proxy-info
        which grid-proxy-init
        which gsissh
    )
    if [[ $? -ne 0 ]]; then
        message 'Required commands not in path.'
        message 'Run this script with osgrun'
        exit 1
    fi
}

die_if_tarball_missing() {
    local tarball=$(local_tarball_path "$1" "$2" "$3")
    if [[ ! -e $tarball ]]; then
        message $tarball not found
        exit 1
    fi
}

die_if_remote_dir_exists() {
    local remote_dir=$1
    local result=$(do_remotely 'test -d '$remote_dir' && echo exists')
    if [[ $result == exists ]]; then
        message "$remote_dir already exists. Not overwriting it."
        exit 1
    fi
}

foreach_dver_arch() {
    local dver
    local arch
    local ret
    local all_ret=0
    for dver in el5 el6; do
        for arch in i386 x86_64; do
            eval "$@"
            ret=$?
            all_ret=$(( all_ret || ret ))
        done
    done
    return $all_ret
}

main "$@"

