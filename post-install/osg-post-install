#!/usr/bin/env python
import glob
import re
import os
import shutil
import sys
import tempfile

SCRIPT_NAME = os.path.basename(sys.argv[0])

class Error(Exception):
    """Class for expected exceptions"""
    pass


def fix_osg_location_in_setup(osg_location):
    abs_osg_location = os.path.abspath(osg_location)
    check_osg_location_message = """
Please check that the directory %r is where the osg client
or worker node client tarball was extracted into.""" % abs_osg_location
    if not os.path.isdir(abs_osg_location):
        raise Error(("OSG location (%r) not found" % abs_osg_location) + check_osg_location_message)

    print("Creating setup files... using %r for OSG_LOCATION" % osg_location)
    for shell in 'sh', 'csh':
        setup_in_file = "setup.%s.in" % shell
        setup_in_path = os.path.join(abs_osg_location, "osg", setup_in_file)
        setup_file = "setup." + shell
        setup_path = os.path.join(abs_osg_location, setup_file)

        if not os.path.exists(setup_in_path):
            raise Error(("%r not found at %r" % (setup_in_file, setup_in_path)) + check_osg_location_message)

        setup_fh = None
        setup_in_fh = None
        try:
            try:
                setup_fh = open(setup_path, 'w')
                setup_in_fh = open(setup_in_path, 'r')
                setup_fh.write("""\
# This file was automatically generated from %s by %s
# Rerunning %s will cause modifications to be lost.
""" % (setup_in_path, SCRIPT_NAME, SCRIPT_NAME))
                for in_line in setup_in_fh:
                    setup_fh.write(re.sub(r'@@OSG_LOCATION@@', osg_location, in_line))
            finally:
                if setup_fh:
                    setup_fh.close()
                if setup_in_fh:
                    setup_in_fh.close()
            os.chmod(setup_path, 0644)
        except EnvironmentError, err:
            raise Error("Unable to create setup file %r for the following reason:\n%s" % (setup_file, str(err)))

        print("Wrote %r" % setup_path)


def fix_osg_location_in_fetch_crl(osg_location):
    abs_osg_location = os.path.abspath(osg_location)
    etc = os.path.join(abs_osg_location, 'etc')

    print("Updating fetch-crl config file(s)")
    confs = glob.glob(os.path.join(etc, "fetch-crl.conf")) + glob.glob(os.path.join(etc, "fetch-crl3.conf"))
    if not confs:
        raise Error("fetch-crl.conf / fetch-crl3.conf not found in %r" % etc) # TODO better message
    out_fh = out_path = in_fh = None
    try:
        try:
            for in_path in confs:
                # mkstemp returns a file descriptor instead of a file object
                _out_fd, out_path = tempfile.mkstemp()
                out_fh = os.fdopen(_out_fd, 'w')
                in_fh = open(in_path, 'r')
                for in_line in in_fh:
                    out_fh.write(re.sub(r'@@OSG_LOCATION@@', osg_location, in_line))
                out_fh.close()
                if os.path.exists(in_path):
                    shutil.copy(in_path, in_path + ".bak")
                shutil.move(out_path, in_path)
                os.chmod(in_path, 0644)
                print("Wrote %r" % in_path)
        finally:
            if out_fh:
                out_fh.close()
            if os.path.exists(out_path):
                os.remove(out_path)
            if in_fh:
                in_fh.close()
    except EnvironmentError, err:
        raise Error("Unable to fix fetch-crl config files for the following reason:\n%s" % str(err))



def main(argv):
    try:
        osg_location = os.getcwd()
        if len(argv) > 1:
            osg_location = argv[1]
        fix_osg_location_in_setup(osg_location)
        fix_osg_location_in_fetch_crl(osg_location)
    except Error, err:
        print("Error: " + str(err))
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))

