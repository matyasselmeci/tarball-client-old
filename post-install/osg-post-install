#!/usr/bin/env python
import glob
import re
import os
import shutil
import sys
import tempfile

SCRIPT_NAME = os.path.basename(sys.argv[0])
SCRIPT_DIR = os.path.dirname(sys.argv[0])
SCRIPT_PARENT_DIR = os.path.realpath(os.path.join(SCRIPT_DIR, '..'))


ansi_cursor_to_column_60 = "\x1b[999D\x1b[60C"
ansi_color_bright_green = "\x1b[32;1m"
ansi_color_bright_red = "\x1b[31;1m"
ansi_color_normal = "\x1b[0;m"

def print_nonl(*args):
    sys.stdout.write(" ".join(args))
    sys.stdout.flush()

def success():
    if sys.stdout.isatty():
        print(ansi_cursor_to_column_60 + "[" + ansi_color_bright_green + " OK " + ansi_color_normal + "]")
    else:
        print("[ OK ]")

def failure(message=""):
    if sys.stdout.isatty():
        print(ansi_cursor_to_column_60 + "[" + ansi_color_bright_red + "FAIL" + ansi_color_normal + "]")
    else:
        print("[FAIL]")
    if message:
        print(message)


def osg_files_dir(osg_location):
    return os.path.join(osg_location, 'osg')


def is_valid_osg_location(osg_location):
    ofd = osg_files_dir(osg_location)
    for osg_file in ['setup.sh.in', 'setup.csh.in', 'osgrun.in']:
        if not os.path.exists(os.path.join(ofd, osg_file)):
            return False
    return True


def write_setup_from_templates(osg_location):
    abs_osg_location = os.path.abspath(osg_location)

    print("Creating environment setup files...")
    for setup_file, mode in ('setup.sh', 0644), ('setup.csh', 0644), ('osgrun', 0755):
        setup_in_file = setup_file + ".in"
        setup_in_path = os.path.join(abs_osg_location, "osg", setup_in_file)
        setup_path = os.path.join(abs_osg_location, setup_file)

        if not os.path.exists(setup_in_path):
            failure("%r not found" % (setup_in_path))
            return

        print_nonl("Creating %r" % setup_file)
        setup_fh = None
        setup_in_fh = None
        try:
            try:
                setup_fh = open(setup_path, 'w')
                setup_in_fh = open(setup_in_path, 'r')
                if mode != 0755: # Executables have shebang lines so don't prepend the comment
                    setup_fh.write("""\
# This file was automatically generated from %s by %s
# Rerunning %s will cause modifications to be lost.
""" % (setup_in_path, SCRIPT_NAME, SCRIPT_NAME))
                for in_line in setup_in_fh:
                    setup_fh.write(re.sub(r'@@OSG_LOCATION@@', osg_location, in_line))
            finally:
                if setup_fh:
                    setup_fh.close()
                if setup_in_fh:
                    setup_in_fh.close()
            os.chmod(setup_path, mode)
            success()
        except EnvironmentError, err:
            failure("Unable to write environment setup file for the following reason:\n%s" % str(err))
    #end for


def write_setup_local_files(osg_location):
    abs_osg_location = os.path.abspath(osg_location)

    for shell in 'sh', 'csh':
        setup_local_file = 'setup-local.' + shell
        setup_local_path = os.path.join(abs_osg_location, setup_local_file)
        if not os.path.exists(setup_local_path):
            setup_local_fh = None
            try:
                try:
                    print_nonl("Creating %r" % setup_local_file)
                    setup_local_fh = open(setup_local_path, 'w')
                    setup_local_fh.write("""\
# This file is for local environment customizations. It is sourced at the end
# of setup.%s and will not be overwritten by future runs of %s.
""" % (shell, SCRIPT_NAME))
                    setup_local_fh.close()
                finally:
                    if setup_local_fh:
                        setup_local_fh.close()
                success()
            except EnvironmentError, err:
                failure("Unable to write local environment setup file for the following reason:\n%s" % str(err))


def fix_osg_location_in_file(file_path, osg_location):
    tmp_fh = tmp_path = file_fh = None
    try:
        # mkstemp returns a file descriptor instead of a file object
        _tmp_fd, tmp_path = tempfile.mkstemp()
        tmp_fh = os.fdopen(_tmp_fd, 'w')
        file_mode = os.stat(file_path).st_mode
        file_fh = open(file_path, 'r')
        for file_line in file_fh:
            tmp_fh.write(re.sub(r'@@OSG_LOCATION@@', osg_location, file_line))
        tmp_fh.close()
        if os.path.exists(file_path):
            shutil.copy(file_path, file_path + ".bak")
        shutil.move(tmp_path, file_path)
        os.chmod(file_path, file_mode)
    finally:
        if tmp_fh:
            tmp_fh.close()
        if os.path.exists(tmp_path):
            os.remove(tmp_path)
        if file_fh:
            file_fh.close()


def fix_osg_location_in_fetch_crl(osg_location):
    abs_osg_location = os.path.abspath(osg_location)
    etc = os.path.join(abs_osg_location, 'etc')

    print_nonl("Updating fetch-crl config file(s)")
    confs = glob.glob(os.path.join(etc, "fetch-crl.conf")) + glob.glob(os.path.join(etc, "fetch-crl3.conf"))
    if not confs:
        failure("fetch-crl.conf / fetch-crl3.conf not found in %r" % etc)
        return
    out_fh = out_path = in_fh = None
    try:
        for in_path in confs:
            fix_osg_location_in_file(in_path, osg_location)
        success()
    except EnvironmentError, err:
        failure("Unable to fix fetch-crl config file(s) for the following reason:\n%s" % str(err))


def fix_osg_location_in_sysconfig_bestman2(osg_location):
    sysconfig_path = os.path.join(osg_location, 'etc/sysconfig/bestman2')

    print_nonl("Updating BeSTMan2 sysconfig file")

    if not os.path.exists(sysconfig_path):
        failure("%r not found" % sysconfig_path)
        return
    try:
        fix_osg_location_in_file(sysconfig_path, osg_location)
        success()
    except EnvironmentError, err:
        failure("Unable to fix BeSTMan2 sysconfig file for the following reason:\n%s" % str(err))


def print_usage():
    print("Usage: %s [<OSG_LOCATION>]" % (SCRIPT_NAME))
    print("""
If not specified on the command line, then the parent directory of this script
(%r) is used for OSG_LOCATION.""" % (SCRIPT_PARENT_DIR))


def main(argv):
    osg_location = None
    if len(argv) > 1:
        if '-h' in argv or '--help' in argv:
            print_usage()
            return 0
        osg_location_candidate = os.path.abspath(argv[1])
        print_nonl("OSG_LOCATION specified as %r... " % (osg_location_candidate))
        if is_valid_osg_location(osg_location_candidate):
            print("ok")
            osg_location = osg_location_candidate
        else:
            print("but is not valid.")
    else:
        print_nonl("OSG_LOCATION not specified; trying %r..." % (SCRIPT_PARENT_DIR))
        if is_valid_osg_location(SCRIPT_PARENT_DIR):
            print("ok")
            osg_location = SCRIPT_PARENT_DIR
        else:
            print("not valid")

    if not osg_location:
        print("No valid OSG_LOCATION found.")
        print_usage()
        return 2

    write_setup_from_templates(osg_location)
    write_setup_local_files(osg_location)
    fix_osg_location_in_fetch_crl(osg_location)
    fix_osg_location_in_sysconfig_bestman2(osg_location)
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))

